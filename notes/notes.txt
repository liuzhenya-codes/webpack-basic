npm install --save 会自动把模块和版本号添加到package.json的dependencies部分，新版默认就加了save，所以没什么不同
https://blog.csdn.net/weixin_41766191/article/details/92094837

loader 是帮助webpack做打包的工具

字体文件统一使用file-loader进行打包

webpack的plugin可以在webpack运行到某个时刻的时候。帮你做一些事情
htmlWebpackplugin 会在打包结束后自动生成一个html文件，并把打包生成的js文件自动引入到这个HTML中
cleanWebpackPlugin 会在打包之前调用，先删除指定打包目录下的所有内容，防止老旧打包文件对接下来的打包操作进行干扰


development（开发环境）官方文档：https://webpack.docschina.org/guides/development/
devServer 官方文档：https://webpack.docschina.org/configuration/dev-server/
webpack --watch 检测到引用模块发生变化时会自动运行一次build，仅仅是build了一次，不会刷新浏览器，不会开前端服务
webpack-dev-serve 检测到引用模块发生变化时会实时编译，自动刷新浏览器，并启动一个本地服务，便于发送跨域请求
node server.js 手动实现 webpack --watch

热更新 Hot Module Replacement （HMR），是项目中一般都需要配置的项，它可以实现局部热更新，而不需要刷新页面，方便开发
静态样式因为 使用了css-loader，所以样式部分会自动的替换，但是其他文件例如HTML和js则需要通过module.hot.accpect手动替换
概念：https://webpack.docschina.org/concepts/hot-module-replacement/
指南：https://webpack.docschina.org/guides/hot-module-replacement/
API：https://webpack.docschina.org/api/hot-module-replacement/

babel 可以转化es6为es5
babel-loader 负责打通跟webpack的关联，并没有转换
babel-preset-env 负责转换新的JavaScript句法（syntax）而不转换新的API
babel-polyfill  为当前环境提供一个垫片，转换新的API，设置useBuiltIns为'usage'如图可以按需加载，这样可以避免转换后文件过大
1.安装babel：https://www.babeljs.cn/setup#installation；bable使用指南：https://www.babeljs.cn/docs/usage
  a.安装babel-loader 和 @babel/core 打通和webpack的通信 => npm install --save-dev babel-loader @babel/core
  b.安装es6基础语法解析器：npm install @babel/preset-env --save-dev
    这里只会解析一些基础语法例如声明语法const let，箭头函数等，es6的新API无法解析
2.安装babel-polyfill：https://www.babeljs.cn/docs/babel-polyfill
  npm install --save @babel/polyfill
  babel-polyfill会将es6中的新API注入到es5环境中，由于es6新语法很多，所以这会注入非常多的代码进es5，为避免无用代码被注入，可选择按需引入
  配合使用 @babel/preset-react 可以编译react代码，注意有先后顺序 @babel/preset-react 将 react 转为 es6 => @babel/preset-env 将 es6 转为 es5
3.babel-polyfill使用时会污染全局变量，若想阻止这一问题 ，需要使用 @bable/plugin-transform-runtime：https://www.babeljs.cn/docs/babel-plugin-transform-runtime
  npm install --save-dev @babel/plugin-transform-runtime
提示:bable的配置可以直接使用 .babelrc 文件注入，以减少webpack.config.js中的配置代码量


tree-shaking 可以实现【将不需要的引用的代码剔除】的功能
配置 optimization: { userExports: true } 即可
如存在不指定import的部分，则需要配合package.json里 "sideEffects": ["*.*"] 进行配置忽略，如果没有需求，则配置为false
注意：production环境下回默认配置 optimization: { userExports: true }，development环境下即使配置了optimization: { userExports: true }打包出来的代码也不会删除任何部分以保证调试准确，但是会给予一定的提示告诉你代码弃用情况